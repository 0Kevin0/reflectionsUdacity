What happens when you initialize a repository? Why do you need to do it?
A: You initialize it so it will contain the necesar files for git to work. Like older versions and the meta data to get back to previous or more updated versions.

How is the staging area different from the working directory and the repository? What value do you think it offers?
A: staging area is probably just a list of files that indicate which files will be commited. The working directory is where the commitable files are located and the repository is what holds the working directory as well as the other files needed by git (e.g. the metadata).

How can you use the staging area to make sure you have one commit per logical change?
A:Using a git diff --staged to check the files before executing the commit. That way it would be easier and faster to see if the changes revolve around one logical change or not.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: I believe that they would help when you experiment with things like new libraries or if you wish to compare the performance of different algorithms on a function.

How do the diagrams help you visualize the branch structure?
A: Well they summarize the changes and show where the code diverts and the ways it took.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A: The result is a file with the common additions and deletions when compared with the original commit from which they departed

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A: The pros of Git's automatic merging are that they require less work, and that it allow for easier teamwork in general. The cons are that they might become harder to track when the code becomes large and the location of code changes, since those changes are harder to track.